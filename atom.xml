<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JJONGLOG</title>
  
  <subtitle>PROGRAMMING&amp;PAINTING</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hjjjong0811.github.io/"/>
  <updated>2018-09-08T10:56:04.718Z</updated>
  <id>https://hjjjong0811.github.io/</id>
  
  <author>
    <name>jjong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++ Template란?</title>
    <link href="https://hjjjong0811.github.io/2018/09/07/programming/180907_CPPtemplate/"/>
    <id>https://hjjjong0811.github.io/2018/09/07/programming/180907_CPPtemplate/</id>
    <published>2018-09-07T10:36:43.000Z</published>
    <updated>2018-09-08T10:56:04.718Z</updated>
    
    <content type="html"><![CDATA[<p>C++ Template 은 알 것 같으면서도 모르겠다. 다시 한번 정리를 한번하고가야 써야할 때 제대로 활용할 수 있을 것같다.</p><h1 id="C-Generic"><a href="#C-Generic" class="headerlink" title="C# Generic"></a>C# Generic</h1><p>혹시 C#을 하신 분이라면 generic에 대해 한번은 들어봤을 것이다. <del>나도 딱히 즐겨사용하던 건 아니지만..</del> 예를 들면 list같은 자료구조를 구현한 클래스에 generic이 적용된 경우 int, float 같은 타입에 상관없이 사용할 수 있다. </p><blockquote><p>generic을 이용해서 자료구조같은 걸 직접 구현하지 않았더라도 다음과 같은 걸 사용해본 적은 있지 않을까?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; List&lt;Interger&gt; myList = new List&lt;Integer&gt;();</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="C-generic-C-template"><a href="#C-generic-C-template" class="headerlink" title="C# generic / C++ template"></a>C# generic / C++ template</h2><p>C++의 Template는 C#의 Generic과 비슷하지만 몇가지 차이점이 있다.</p><p><a href="https://docs.microsoft.com/ko-kr/dotnet/csharp/programming-guide/generics/differences-between-cpp-templates-and-csharp-generics" target="_blank" rel="noopener">msdn 문서</a>에서는 다음과 같이 주요 차이점을 설명하고 있다.</p><ul><li>C# 제네릭은 C++ 템플릿과 동일한 수준의 유연성을 제공하지 않습니다. 예를 들어 C# 제네릭 클래스에서 산술 연산자는 호출할 수 없지만 사용자 정의 연산자는 호출할 수 있습니다.</li><li>C#에서는 <code>template C&lt;int i&gt; {}</code> 같은 비형식 템플릿 매개 변수를 허용하지 않습니다.</li><li>C#은 명시적 특수화 즉, 특정 형식에 대한 템플릿의 사용자 지정 구현을 지원하지 않습니다.</li><li>C#은 부분 특수화 즉, 형식 인수의 하위 집합에 대한 사용자 지정 구현을 지원하지 않습니다.</li><li>C#에서는 형식 매개 변수를 제네릭 형식에 대한 기본 클래스로 사용할 수 없습니다.</li><li>C#에서는 형식 매개 변수가 기본 형식을 사용할 수 없습니다.</li><li>C#에서 제네릭 형식 매개 변수 자체는 제네릭이 될 수 없지만 생성된 형식은 제네릭으로 사용할 수 있습니다. C++에서는 템플릿 매개 변수를 허용합니다.</li><li>C++에서는 템플릿의 일부 형식 매개 변수에 적합하지 않아 형식 매개 변수로 사용되는 특정 형식을 확인하는 코드를 허용합니다. C#에서는 제약 조건을 충족하는 모든 형식에서 작동하는 방식으로 작성할 코드가 클래스에 필요합니다. 예를 들어 C++에서는 산술 연산자 <code>+</code> 및 <code>-</code>를 사용하는 함수를 형식 매개 변수의 개체에서 작성하여 이러한 연산자를 지원하지 않는 형식으로 템플릿을 인스턴스화할 때 오류를 생성할 수 있습니다. C#에서는 이를 허용하지 않습니다. 허용되는 유일한 언어 구문은 제약 조건에서 추론할 수 있는 구문입니다.</li></ul><p>차이점만 보았을 때는 C# Generic이 C++ Template의 간소화버전같은 느낌이다. Template 이 복잡한만큼 잘 용하면 할 수 있는 일이 많아보인다.</p><p>또한 구현수준에서의 차이점을 이렇게 설명하고 있다.</p><blockquote><p>구현 수준에서 주요 차이점은 런타임에 C# 제네릭 형식 대체가 수행되어 인스턴스화된 개체에 대해 제네릭 형식 정보가 유지된다는 점입니다.</p></blockquote><p>Template는 컴파일 시점에 타입별로 코드가 생성된다. 반면에 Generic은 런타임에 타입별로 특수화된 제네릭 형식을 만든다고 한다. <del>template는 컴파일 시점에 만드니까 컴파일 시간과 용량이 커지는 대신 속도가 빠를 것으로 예상되는데..</del> </p><h1 id="Template-란"><a href="#Template-란" class="headerlink" title="Template 란"></a>Template 란</h1><p>그래서 Template 란 어떤 것일까? 사전적 의미로는 <strong>형판</strong>을 뜻한다. 무언가(구체적인 타입)를 만들기 위한 형판이라고 보면 되겠다.</p><p><strong>만약 List 자료구조를 만드려는데 int, float, 각종 사용자 타입별로 list를 각각 구현하면 어떨까?</strong></p><p>List를 이용해야하는 타입별로 전부 코드를 작성해야할 것이다. 이용할 타입이 추가되는 경우 또 그에맞는 NewTypeList 클래스를 만들고.. 만약 메소드 기능을 바꾸려한다면? 모든 클래스를 수정해야하는 끔찍한 일이 생긴다.</p><p><strong>Temlate 를 이용하면 여러 타입에서 작동할 수 있는 클래스나 함수를 구현할 수 있다.</strong></p><p>C++ 에서 Template라는 기능을 지원하는 것에 감사하며 구체적으로 어디에 적용할 수 있는지를 알아보자!</p><h1 id="Template의-종류"><a href="#Template의-종류" class="headerlink" title="Template의 종류"></a>Template의 종류</h1><p>Template의 종류로는 함수 템플릿, 클래스 템플릿 두 가지가 있다. C++14부터는 세번째 템플릿으로 변수 템플릿이 있다. <a href="https://ko.wikipedia.org/wiki/%ED%85%9C%ED%94%8C%EB%A6%BF_(C%2B%2B" target="_blank" rel="noopener">Wiki</a>)</p><ul><li>클래스 템플릿</li><li>함수 템플릿</li><li>변수 템플릿(C++ 14 ~)</li></ul><h2 id="클래스-템플릿"><a href="#클래스-템플릿" class="headerlink" title="클래스 템플릿"></a>클래스 템플릿</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(T value)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>클래스에 템플릿을 적용한 것이다.</p><hr><p>그런데 템플릿을 적용한 클래스가 모든 타입에 대해서 제대로 작동할까? 만약 특정 타입에 대해서는 전후에 해야할 작업이 있다면 어떻게 하면 좋을까</p><p><strong>그런 경우에는 특수화를 이용해서 문제를 해결할 수 있다</strong></p><h3 id="명시적특수화"><a href="#명시적특수화" class="headerlink" title="명시적특수화"></a>명시적특수화</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">class</span> <span class="title">Formatter</span>&#123;</span></span><br><span class="line">    T* <span class="keyword">m_t</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Formatter(T* t) : <span class="keyword">m_t</span>(t)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *<span class="keyword">m_t</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="class"><span class="keyword">class</span> <span class="title">Formatter</span>&lt;char*&gt;&#123;</span></span><br><span class="line">    <span class="keyword">char</span>** <span class="keyword">m_t</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    formatter(<span class="keyword">char</span>** t) : <span class="keyword">m_t</span>(t)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Char value: "</span> &lt;&lt; **<span class="keyword">m_t</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>클래스에서 이용하는 타입매개변수 전체에 대해 특수화할 수 있다. 위 예제에서 char* 의 경우는 특수화 된 클래스를 이용한다. 마치 클래스를 오버로딩하는 듯 하다.</p><h3 id="부분특수화"><a href="#부분특수화" class="headerlink" title="부분특수화"></a>부분특수화</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyExamClass</span>&#123;</span></span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyExamClass</span>&lt;T*, int&gt;&#123;</span></span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>변수 일부에 대해 부분적으로 특수화할 수 있다.</p><h2 id="함수-템플릿"><a href="#함수-템플릿" class="headerlink" title="함수 템플릿"></a>함수 템플릿</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(T value)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>템플릿은 함수에도 적용될 수 있다. </p><h3 id="템플릿-오버로딩"><a href="#템플릿-오버로딩" class="headerlink" title="템플릿 오버로딩"></a>템플릿 오버로딩</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(T value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, T2&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(T1 val1, T2 val2)</span></span>;</span><br></pre></td></tr></table></figure><p>다른 함수들처럼 오버로딩할 수 있다.</p><h1 id="장단점"><a href="#장단점" class="headerlink" title="장단점"></a>장단점</h1><p><strong>장점</strong></p><ul><li>각 타입별로 같은 기능을 지원하는 클래스를 따로 만들 필요가 없다! (야호)</li><li>실제로 사용한 타입에 대해서만 코드가 생성된다</li></ul><p>단점</p><ul><li>컴파일 시간이 길어진다</li><li>용량이 커질 수 있다</li></ul><h1 id="ETC"><a href="#ETC" class="headerlink" title="ETC"></a>ETC</h1><h2 id="typename-class"><a href="#typename-class" class="headerlink" title="typename? class?"></a>typename? class?</h2><p>보통은 어느 것을 쓰던 상관없지만 특수한 경우가 있다고 한다. 자세한 내용은 <a href="https://hashcode.co.kr/questions/554/%ED%85%9C%ED%94%8C%EB%A6%BF%EC%97%90%EC%84%9C-typename%ED%82%A4%EC%9B%8C%EB%93%9C%EC%99%80-class%ED%82%A4%EC%9B%8C%EB%93%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4" target="_blank" rel="noopener">여기</a></p><h2 id="템플릿-메타프로그래밍"><a href="#템플릿-메타프로그래밍" class="headerlink" title="템플릿 메타프로그래밍"></a>템플릿 메타프로그래밍</h2><p>템플릿 메타프로그래밍(Template Metaprogramming)은 템플릿을 이용한 프로그래밍 기법으로, 컴파일러에게 프로그램 코드를 생성하도록 하는 방식이다.<a href="https://ko.wikipedia.org/wiki/%ED%85%9C%ED%94%8C%EB%A6%BF_%EB%A9%94%ED%83%80%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D" target="_blank" rel="noopener">Wiki</a></p><p>Template는 컴파일 시점에 코드가 생성된다. 따라서 런타임이 아닌 컴파일 시점으로 작업을 옮길 수 있어 <strong>잘만</strong> 이용하면 효율적이다. 물론 디버깅도 어렵고 잘못하면 안좋을 것같다..</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Factorial</span> &#123;</span></span><br><span class="line">    <span class="keyword">enum</span> &#123;value = N * Factorial&lt;N<span class="number">-1</span>&gt;::value&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line">sturct Factorial&lt;<span class="number">0</span>&gt;&#123;</span><br><span class="line"><span class="keyword">enum</span> &#123;value = <span class="number">1</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Factorial&lt;4&gt;::value == 24</span></span><br><span class="line"><span class="comment">//Factorial&lt;0&gt;::value == 1</span></span><br></pre></td></tr></table></figure><p>팩토리얼이 예제로 많이 나오는데, 템플릿의 경우 컴파일 때 타입별로 코드를 생성하므로, 필요한 팩토리얼 값만 구할 수 있다. 다만 Factorial<x>::value 에서 X는 컴파일 시점에 알 수 있는 상수 값이어야 한다.</x></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C++ Template 은 알 것 같으면서도 모르겠다. 다시 한번 정리를 한번하고가야 써야할 때 제대로 활용할 수 있을 것같다.&lt;/p&gt;
&lt;h1 id=&quot;C-Generic&quot;&gt;&lt;a href=&quot;#C-Generic&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="programming" scheme="https://hjjjong0811.github.io/categories/programming/"/>
    
    
      <category term="C++" scheme="https://hjjjong0811.github.io/tags/C/"/>
    
      <category term="template" scheme="https://hjjjong0811.github.io/tags/template/"/>
    
  </entry>
  
  <entry>
    <title>Dummy2</title>
    <link href="https://hjjjong0811.github.io/2018/09/06/Dummy2/"/>
    <id>https://hjjjong0811.github.io/2018/09/06/Dummy2/</id>
    <published>2018-09-06T12:23:37.000Z</published>
    <updated>2018-09-06T17:05:24.882Z</updated>
    
    <content type="html"><![CDATA[<p>Test</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Test&#123;</span><br><span class="line">    <span class="keyword">enum</span> TestEnum&#123;</span><br><span class="line">        COOL, BANANABOAT</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> :</span> <span class="keyword">public</span> Mom&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">static</span> TestClass <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> param)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> _mNum;  <span class="comment">//Dummy Member Var</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> DDDDD = <span class="number">343</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    TestClass t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; <span class="number">10</span>; ++i)&#123;</span><br><span class="line">        num += i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Test&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="hobby" scheme="https://hjjjong0811.github.io/categories/hobby/"/>
    
    
      <category term="DummyTag1" scheme="https://hjjjong0811.github.io/tags/DummyTag1/"/>
    
  </entry>
  
  <entry>
    <title>Dummy</title>
    <link href="https://hjjjong0811.github.io/2018/09/06/Dummy5/"/>
    <id>https://hjjjong0811.github.io/2018/09/06/Dummy5/</id>
    <published>2018-09-06T12:23:37.000Z</published>
    <updated>2018-09-06T17:05:50.164Z</updated>
    
    <content type="html"><![CDATA[<p>Test</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Test&lt;/p&gt;

      
    
    </summary>
    
      <category term="download" scheme="https://hjjjong0811.github.io/categories/download/"/>
    
    
      <category term="DummyTag1" scheme="https://hjjjong0811.github.io/tags/DummyTag1/"/>
    
  </entry>
  
  <entry>
    <title>깃허브 블로그 시작!</title>
    <link href="https://hjjjong0811.github.io/2018/09/06/daily/180906_%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%8B%9C%EC%9E%91/"/>
    <id>https://hjjjong0811.github.io/2018/09/06/daily/180906_블로그시작/</id>
    <published>2018-09-05T15:43:00.000Z</published>
    <updated>2018-09-08T11:02:13.925Z</updated>
    
    <content type="html"><![CDATA[<p>네이버 블로그를 쓰다가 꾸미는데 답답함을 느껴서 이사왔다!<br>블로그 처음 시작할때는 내용이 좀 대충이더라도 꾸준히 포스팅을 하자고 생각했는데, 공부만 아니라 포스팅하는데도 시간이 걸리다보니 계속 미루게 됐다</p><h3 id="일하면서-보고-느낀건데-스스로-어디를-어떻게-모르는지-아는게-굉장히-중요한-것-같다"><a href="#일하면서-보고-느낀건데-스스로-어디를-어떻게-모르는지-아는게-굉장히-중요한-것-같다" class="headerlink" title="일하면서 보고 느낀건데 스스로 어디를 어떻게 모르는지 아는게 굉장히 중요한 것 같다"></a>일하면서 보고 느낀건데 스스로 어디를 어떻게 모르는지 아는게 굉장히 중요한 것 같다</h3><p>그래서 요즘은 프로그래밍하다 생각할 게 있을 때면 메모장에 내가 어떻게 생각을 해나가는지 적어보고 있다! 머리 속에서 날라가게 안놔두고 적어보니까 부족한 부분이 이전보다 잘 보여서 좋다</p><h3 id="또-한번에-정리된-내용을-적으려-하면-참-부담이-많이-된다"><a href="#또-한번에-정리된-내용을-적으려-하면-참-부담이-많이-된다" class="headerlink" title="또 한번에 정리된 내용을 적으려 하면 참 부담이 많이 된다."></a>또 한번에 정리된 내용을 적으려 하면 참 부담이 많이 된다.</h3><p>중고등학교때 노트정리를 하면 꼭 단원은 대괄호, 주제는 1. , 상세 내용은 소괄호.. 나름의 규칙을 정해서 반듯하게 정리하려 노력했었는데 시간이 엄청 걸렸다. 그래서 형식을 다 없애고 싶어서 공책을 전부 찢어서 낱장으로 썼다. 얼마든지 수정할 수 있다는 안도감?을 주고 싶었다. 훨씬 효율이 나아졌다. 그 뒤로 마음속에 <strong>적당히, 대충, 빨리</strong> 세 단어를 새겼다.</p><p>그래서 이런저런 이유로 블로그 이사온 김에 이번 블로그는 좀더 빠르게 적어보려고 한다! 적어놓고 다시 보고, 다듬어나가다보면 언젠가는 한번에 좋은 포스팅을 할 수 있겠지!</p><blockquote><p>Written with <a href="https://stackedit.io/" target="_blank" rel="noopener">StackEdit</a>.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;네이버 블로그를 쓰다가 꾸미는데 답답함을 느껴서 이사왔다!&lt;br&gt;블로그 처음 시작할때는 내용이 좀 대충이더라도 꾸준히 포스팅을 하자고 생각했는데, 공부만 아니라 포스팅하는데도 시간이 걸리다보니 계속 미루게 됐다&lt;/p&gt;
&lt;h3 id=&quot;일하면서-보고
      
    
    </summary>
    
      <category term="daily" scheme="https://hjjjong0811.github.io/categories/daily/"/>
    
    
  </entry>
  
  <entry>
    <title>크롬 검색이 강제로 야후로 돼요</title>
    <link href="https://hjjjong0811.github.io/2017/07/21/information/170721_%ED%81%AC%EB%A1%AC%EA%B2%80%EC%83%89%EC%95%BC%ED%9B%84/"/>
    <id>https://hjjjong0811.github.io/2017/07/21/information/170721_크롬검색야후/</id>
    <published>2017-07-21T04:32:00.000Z</published>
    <updated>2018-09-08T12:15:38.228Z</updated>
    
    <content type="html"><![CDATA[<p>노트북을 사고 인터넷을 여기저기 들어가다보니 어느 순간부터 크롬 시작페이지가 구글이 아닌 다른 곳으로 가지고, 주소창에 검색을 하면 구글주소가 뜨는 듯 하더니 야후로 검색이 되네요. 뭐때문인가 찾아봤더니 크롬 확장프로그램에 못보던게 깔려있더라구요</p><blockquote><p>Plugins button</p></blockquote><p>이라는 확장프로그램이었습니다. <del>애드웨어인가봐요 새 노트북인데..</del></p><p><img src="/images/information/170721_크롬검색야후_1.png" alt=""></p><p>지금은 지워서 없는데요, 구글 확장프로그램 페이지에서 삭제를 하려고해도</p><blockquote><p>엔터프라이즈 정책에 의해 설치됨</p></blockquote><p>이라고만 뜨고 삭제버튼이 안먹더라구요</p><p>제가 지운 방법 포스팅합니다</p><h3 id="방법1-폴더에서-삭제"><a href="#방법1-폴더에서-삭제" class="headerlink" title="방법1 폴더에서 삭제"></a>방법1 폴더에서 삭제</h3><ul><li><p>먼저 <code>chrome://extensions/</code>  에 들어가서 못보던 확장프로그램이 있는지 확인합니다</p></li><li><p>그리고 개발자 모드에 체크합니다</p></li></ul><p><img src="/images/information/170721_크롬검색야후_2.png" alt=""></p><ul><li><p>개발자모드에 체크하면 ID가 뜨는데요 이 ID를 확인해줍니다</p></li><li><p>확인 후에 <code>C:\Users\(계정)\AppData\Local\Google\Chrome\User Data\Default\Extensions</code> 에 들어가보면 ID로된 폴더들이 있을건데요</p><p><em>만약 폴더가 보이지 않는다면 폴더 보기 옵션에서 숨긴항목 표시를 체크해주세요</em></p><p><img src="/images/information/170721_크롬검색야후_3.png" alt=""></p></li><li><p><code>C:\Windows\System32\GroupPolicy\Machine\Registry.pol</code> 파일을 지워주세요</p></li><li><p>이 파일을 지우고나서 <code>chrome://policy/</code>에 들어가보면 지워진걸 확인할 수 있습니다</p></li></ul><h3 id="방법2-레지스트리-편집기에서-삭제"><a href="#방법2-레지스트리-편집기에서-삭제" class="headerlink" title="방법2 레지스트리 편집기에서 삭제"></a>방법2 레지스트리 편집기에서 삭제</h3><p>만약 확장 프로그램이 이 방법으로 삭제되지 않는 경우 레지스트리 편집기에서 삭제하실 수도 있습니다.</p><ul><li><p>레지스트리 편집기 실행 <code>실행(Win + R) -&gt; regedit</code></p></li><li><p><code>HKEY_LOCAL_MACHINE - SOFTWARE - Policies - Google - Chrome - ExtensionInstallForcelist</code>  삭제</p></li></ul><p>이후에 크롬을 다시시작했더니 야후가 아니라 구글로 제대로 되었습니다</p><p>저는 이방법으로 해결했어요</p><p>잘못된 것이 있다면 댓글 달아주시기 바랍니다!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;노트북을 사고 인터넷을 여기저기 들어가다보니 어느 순간부터 크롬 시작페이지가 구글이 아닌 다른 곳으로 가지고, 주소창에 검색을 하면 구글주소가 뜨는 듯 하더니 야후로 검색이 되네요. 뭐때문인가 찾아봤더니 크롬 확장프로그램에 못보던게 깔려있더라구요
      
    
    </summary>
    
      <category term="information" scheme="https://hjjjong0811.github.io/categories/information/"/>
    
    
  </entry>
  
</feed>
